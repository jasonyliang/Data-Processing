par(mar=c(5, 4, 4, 5))
plot(date1, Trend, type = 'l', ylim = ylimits, col = "black", lyt = 1)
par(new = T)
lines(date1, upper, col = 'red', type = 'l', lyt = 2)
par(new = T)
lines(date1, lower, col = 'green', type = 'l', axes = F, ylab = NA, ylim = ylimits, lyt = 3)
colors <- c('black', "red", "green")
name <- c('Mean', 'Upper bound', 'Lower bound')
legend("bottomright", legend = name, fill = colors, cex = 1)
legend("bottomright", legend = name, col = colors, cex = 1)
legend("bottomright", legend = name, col = colors, lyt = 1: 3, cex = 1)
legend("bottomright", legend = name, col = colors, lyt = 1, cex = 1)
#For SLRy
#Variation of 50-year mean sea level trends in San Francisco
#plotted against the mid-year of each 50-year period
date1 <- SLRy$Trend.Year
Trend <- SLRy$Trend.in.mm
upper <- SLRy$Upper95.
lower <- SLRy$Lower95.
ylimits <- c(min(lower), max(upper))
par(mar=c(5, 4, 4, 5))
plot(date1, Trend, type = 'l', ylim = ylimits, col = "black", lyt = 1)
par(new = T)
lines(date1, upper, col = 'red', type = 'l', lyt = 2)
#For SLRy
#Variation of 50-year mean sea level trends in San Francisco
#plotted against the mid-year of each 50-year period
date1 <- SLRy$Trend.Year
Trend <- SLRy$Trend.in.mm
upper <- SLRy$Upper95.
lower <- SLRy$Lower95.
ylimits <- c(min(lower), max(upper))
plot(date1, Trend, type = 'l', ylim = ylimits, col = "black")
lines(date1, upper, col = 'red', type = 'l')
lines(date1, lower, col = 'green', type = 'l')
colors <- c('black', "red", "green")
name <- c('Mean', 'Upper bound', 'Lower bound')
legend("bottomright", legend = name, col = colors, lyt = 1, cex = 1)
legend("bottomright", legend = name, col = colors, cex = 1)
legend("bottomright", legend = name, col = colors, lyt = 1:2 cex = 1)
legend("bottomright", legend = name, col = colors, lyt = 1:2, cex = 1)
ylimits <- c(min(lower), max(upper))
plot(date1, Trend, type = 'l', ylim = ylimits, col = "black")
lines(date1, upper, col = 'red', type = 'l', lyt = 2)
lines(date1, upper, col = 'red', lyt = 2)
lines(date1, upper, col = 'red', lyt = 2)
lines(date1, lower, col = 'green', type = 'l', lyt = 3)
lines(date1, upper, col = 'red', type = 'b', lyt = 2)
lines(date1, upper, col = 'red', lyt = 2)
#For SLRy
#Variation of 50-year mean sea level trends in San Francisco
#plotted against the mid-year of each 50-year period
date1 <- SLRy$Trend.Year
Trend <- SLRy$Trend.in.mm
upper <- SLRy$Upper95.
lower <- SLRy$Lower95.
ylimits <- c(min(lower), max(upper))
plot(date1, Trend, type = 'l', ylim = ylimits, col = "black")
lines(date1, upper, col = 'red')
lines(date1, lower, col = 'green', type = 'l')
colors <- c('black', "red", "green")
name <- c('Mean', 'Upper bound', 'Lower bound')
legend("bottomright", legend = name, col = colors, lyt = c(1, 1, 1), cex = 1)
legend("bottomright", legend = name, col = colors, lwd = c(1, 1, 1), cex = 1)
legend("bottomright", legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
source('~/Desktop/EA/LBA/Dataviz.R')
legend(1975, -1, legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
legend(1960, 0.25, legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
legend(1960, 0, legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
source('~/Desktop/EA/LBA/Dataviz.R')
plot(date1, Trend, type = 'l', ylim = ylimits, col = "black",
xlab = "Date (years)", ylab = "Mean Sea Level variation (m)")
lines(date1, upper, col = 'red')
lines(date1, lower, col = 'green', type = 'l')
colors <- c('black', "red", "green")
name <- c('Mean', 'Upper bound', 'Lower bound')
legend(1960, 0, legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
plot(date1, Trend, type = 'o', ylim = ylimits, col = "black",
xlab = "Time (years)", ylab = "Mean Sea Level variation (mm/yr)")
lines(date1, upper, col = 'red')
lines(date1, lower, col = 'green', type = 'l')
colors <- c('black', "red", "green")
name <- c('Mean', 'Upper bound', 'Lower bound')
legend(1960, 0, legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
grid(6, 5, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
source('~/Desktop/EA/LBA/Dataviz.R')
grid(NULL, NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
source('~/Desktop/EA/LBA/Dataviz.R')
polygon(c(data1, rev(data1)), c(upper, rev(Trend)),
col = "red", border = NA)
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
data1
polygon(c(date1, rev(date1)), c(upper, rev(Trend)),
col = "red", border = NA)
polygon(c(date1, rev(date1)), c(upper, rev(Trend)),
col = "red", border = NA, alpha = 0.3)
source('~/Desktop/EA/Scientific Proposal/Scientific Proposal Graph.R')
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
source('~/Desktop/EA/LBA/Dataviz.R')
#For SLRm
#Mean Sea Level Trend on a monthly basis in San Francisco
#values are relative to the most recent Mean Sea Level datum established by CO-OPS
date <- SLRm$Year[55:nrow(SLRm)]
Sealevel <- SLRm$Monthly_MSL[55:nrow(SLRm)]
plot(date, Sealevel, type ='l', cex = 0.3, xlab = "Time (years.months)",
ylab = "Sea Level anomalies (m)")
grid(NULL, NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
fit <- lm(Sealevel~date)
abline(fit, col="red")
plot(date, Sealevel, type ='l', cex = 0.3, xlab = "Time (years.months)",
ylab = "Sea Level anomalies (m)")
source('~/Desktop/EA/LBA/Dataviz.R')
#For SLRm
#Mean Sea Level Trend on a monthly basis in San Francisco
#values are relative to the most recent Mean Sea Level datum established by CO-OPS
date <- SLRm$Year[55:nrow(SLRm)]
Sealevel <- SLRm$Monthly_MSL[55:nrow(SLRm)]
plot(date, Sealevel, type ='l', cex = 0.3, xlab = "Time (years.months)",
ylab = "Sea Level anomalies (m)")
grid(NULL, NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
fit <- lm(Sealevel~date)
abline(fit, col="red")
#For SLRy
#Variation of 50-year mean sea level trends in San Francisco
#plotted against the mid-year of each 50-year period
date1 <- SLRy$Trend.Year
Trend <- SLRy$Trend.in.mm
upper <- SLRy$Upper95.
lower <- SLRy$Lower95.
ylimits <- c(min(lower), max(upper))
plot(date1, Trend, type = 'o', ylim = ylimits, col = "black",
xlab = "Time (years)", ylab = "Mean Sea Level variation (mm/yr)", pch = 23)
lines(date1, upper, col = 'red')
lines(date1, lower, col = 'green', type = 'l')
colors <- c('black', "red", "green")
polygon(c(date1, rev(date1)), c(upper, rev(Trend)),
col = rgb(1, 0, 0, 0.3), border = NA)
polygon(c(date1, rev(date1)), c(Trend, rev(lower)),
col = rgb(0, 1, 0, 0.3), border = NA)
name <- c('Mean', 'Upper bound', 'Lower bound')
grid(NULL, NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
legend(1960, 0, legend = name, col = colors, lwd = c(1, 1, 1), cex = 0.7)
setwd("~/Desktop/Github/Data-Processing/Machine Learning A-Z/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling")
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1 + 1,
shape2 = numbers_of_rewards_0 + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
source('~/Desktop/Github/Data-Processing/Machine Learning A-Z/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling/practice.R')
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1 + 1,
shape2 = numbers_of_rewards_0 + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
shape1 = numbers_of_rewards_1 + 1,
shape2 = numbers_of_rewards_0 + 1)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
# Thompson Sampling
# Importing dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
rewards = dataset[n, ad]
if (rewards == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + rewards
}
# Visualizing the results
hist( ads_selected,
col = 'blue',
main = 'Histogram of Ads selection',
xlab = 'Ads',
ylab = 'Number of times each ad was selected'
)
